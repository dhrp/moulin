// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package API is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Task
	Meta
	RequestMessage
	StatusMessage
*/
package API

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_SUCCESS Status = 0
	Status_FAILURE Status = 1
	Status_UNKNOWN Status = 2
)

var Status_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILURE",
	2: "UNKNOWN",
}
var Status_value = map[string]int32{
	"SUCCESS": 0,
	"FAILURE": 1,
	"UNKNOWN": 2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Task is the definition of a task
type Task struct {
	// reserved 1; // we took queueID out
	// reserved "queueID";
	QueueID       string   `protobuf:"bytes,1,opt,name=queueID" json:"queueID,omitempty"`
	TaskID        string   `protobuf:"bytes,2,opt,name=taskID" json:"taskID,omitempty"`
	Body          string   `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	Envs          []string `protobuf:"bytes,4,rep,name=envs" json:"envs,omitempty"`
	ExpirationSec int32    `protobuf:"varint,5,opt,name=expirationSec" json:"expirationSec,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Task) GetQueueID() string {
	if m != nil {
		return m.QueueID
	}
	return ""
}

func (m *Task) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

func (m *Task) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Task) GetEnvs() []string {
	if m != nil {
		return m.Envs
	}
	return nil
}

func (m *Task) GetExpirationSec() int32 {
	if m != nil {
		return m.ExpirationSec
	}
	return 0
}

type Meta struct {
	QueueID string `protobuf:"bytes,1,opt,name=queueID" json:"queueID,omitempty"`
}

func (m *Meta) Reset()                    { *m = Meta{} }
func (m *Meta) String() string            { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()               {}
func (*Meta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Meta) GetQueueID() string {
	if m != nil {
		return m.QueueID
	}
	return ""
}

type RequestMessage struct {
	QueueID       string `protobuf:"bytes,1,opt,name=queueID" json:"queueID,omitempty"`
	ExpirationSec int32  `protobuf:"varint,2,opt,name=expirationSec" json:"expirationSec,omitempty"`
}

func (m *RequestMessage) Reset()                    { *m = RequestMessage{} }
func (m *RequestMessage) String() string            { return proto.CompactTextString(m) }
func (*RequestMessage) ProtoMessage()               {}
func (*RequestMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RequestMessage) GetQueueID() string {
	if m != nil {
		return m.QueueID
	}
	return ""
}

func (m *RequestMessage) GetExpirationSec() int32 {
	if m != nil {
		return m.ExpirationSec
	}
	return 0
}

type StatusMessage struct {
	Status Status `protobuf:"varint,1,opt,name=status,enum=API.Status" json:"status,omitempty"`
	Detail string `protobuf:"bytes,2,opt,name=detail" json:"detail,omitempty"`
}

func (m *StatusMessage) Reset()                    { *m = StatusMessage{} }
func (m *StatusMessage) String() string            { return proto.CompactTextString(m) }
func (*StatusMessage) ProtoMessage()               {}
func (*StatusMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StatusMessage) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_SUCCESS
}

func (m *StatusMessage) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func init() {
	proto.RegisterType((*Task)(nil), "API.Task")
	proto.RegisterType((*Meta)(nil), "API.Meta")
	proto.RegisterType((*RequestMessage)(nil), "API.RequestMessage")
	proto.RegisterType((*StatusMessage)(nil), "API.StatusMessage")
	proto.RegisterEnum("API.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	Healthz(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*StatusMessage, error)
	PushTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusMessage, error)
	LoadTask(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*Task, error)
	HeartBeat(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusMessage, error)
	Complete(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusMessage, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Healthz(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := grpc.Invoke(ctx, "/API.API/Healthz", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PushTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := grpc.Invoke(ctx, "/API.API/PushTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) LoadTask(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := grpc.Invoke(ctx, "/API.API/LoadTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) HeartBeat(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := grpc.Invoke(ctx, "/API.API/HeartBeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Complete(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := grpc.Invoke(ctx, "/API.API/Complete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	Healthz(context.Context, *google_protobuf1.Empty) (*StatusMessage, error)
	PushTask(context.Context, *Task) (*StatusMessage, error)
	LoadTask(context.Context, *RequestMessage) (*Task, error)
	HeartBeat(context.Context, *Task) (*StatusMessage, error)
	Complete(context.Context, *Task) (*StatusMessage, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API.API/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Healthz(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PushTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).PushTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API.API/PushTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).PushTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_LoadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).LoadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API.API/LoadTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).LoadTask(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API.API/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).HeartBeat(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API.API/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Complete(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "API.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _API_Healthz_Handler,
		},
		{
			MethodName: "PushTask",
			Handler:    _API_PushTask_Handler,
		},
		{
			MethodName: "LoadTask",
			Handler:    _API_LoadTask_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _API_HeartBeat_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _API_Complete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xc5, 0x49, 0x9a, 0xc7, 0xad, 0x5a, 0x45, 0x53, 0x51, 0x59, 0x6e, 0x55, 0x45, 0xa6, 0x8b,
	0xaa, 0x0b, 0x8f, 0x28, 0x3b, 0x76, 0x21, 0x0d, 0xad, 0x45, 0x9a, 0x5a, 0x36, 0x11, 0xeb, 0x09,
	0xb9, 0x24, 0x56, 0x53, 0x8f, 0x9b, 0x19, 0x57, 0x94, 0xaa, 0x1b, 0x24, 0xf8, 0x01, 0x3e, 0x8d,
	0x5f, 0xe0, 0x43, 0xd0, 0x5c, 0xdb, 0x82, 0x08, 0x03, 0x9b, 0xee, 0xee, 0xb9, 0x8f, 0x33, 0x47,
	0xe7, 0x0c, 0x74, 0x44, 0x1a, 0x7b, 0xe9, 0x4a, 0x6a, 0xc9, 0xea, 0xfd, 0xc0, 0x77, 0xf6, 0xe7,
	0x52, 0xce, 0x97, 0xc8, 0x45, 0x1a, 0x73, 0x91, 0x24, 0x52, 0x0b, 0x1d, 0xcb, 0x44, 0xe5, 0x2b,
	0xce, 0x5e, 0x31, 0x25, 0x34, 0xcd, 0x3e, 0x70, 0xbc, 0x4e, 0xf5, 0x5d, 0x3e, 0x74, 0xbf, 0x5a,
	0xd0, 0x78, 0x2b, 0xd4, 0x15, 0xb3, 0xa1, 0x75, 0x93, 0x61, 0x86, 0xfe, 0xa9, 0x6d, 0xf5, 0xac,
	0xa3, 0x4e, 0x58, 0x42, 0xb6, 0x0b, 0x4d, 0x2d, 0xd4, 0x95, 0x7f, 0x6a, 0xd7, 0x68, 0x50, 0x20,
	0xc6, 0xa0, 0x31, 0x95, 0xb3, 0x3b, 0xbb, 0x4e, 0x5d, 0xaa, 0x4d, 0x0f, 0x93, 0x5b, 0x65, 0x37,
	0x7a, 0x75, 0xd3, 0x33, 0x35, 0x3b, 0x84, 0x2d, 0xfc, 0x98, 0xc6, 0x2b, 0x12, 0x15, 0xe1, 0x7b,
	0x7b, 0xa3, 0x67, 0x1d, 0x6d, 0x84, 0xeb, 0x4d, 0xb7, 0x07, 0x8d, 0x0b, 0xd4, 0xe2, 0xef, 0x3a,
	0xdc, 0x00, 0xb6, 0x43, 0xbc, 0xc9, 0x50, 0xe9, 0x0b, 0x54, 0x4a, 0xcc, 0xf1, 0x1f, 0x9a, 0xff,
	0x78, 0xb3, 0x56, 0xf5, 0xe6, 0x08, 0xb6, 0x22, 0x2d, 0x74, 0xa6, 0x4a, 0xc2, 0x67, 0xd0, 0x54,
	0xd4, 0x20, 0xbe, 0xed, 0x93, 0x4d, 0xaf, 0x1f, 0xf8, 0x5e, 0xbe, 0x13, 0x16, 0x23, 0xe3, 0xc7,
	0x0c, 0xb5, 0x88, 0x97, 0xa5, 0x1f, 0x39, 0x3a, 0xe6, 0xd0, 0xcc, 0x37, 0xd9, 0x26, 0xb4, 0xa2,
	0xc9, 0x60, 0x30, 0x8c, 0xa2, 0xee, 0x13, 0x03, 0x5e, 0xf7, 0xfd, 0xd1, 0x24, 0x1c, 0x76, 0x2d,
	0x03, 0x26, 0xe3, 0x37, 0xe3, 0xcb, 0x77, 0xe3, 0x6e, 0xed, 0xe4, 0x4b, 0x1d, 0x4c, 0x7c, 0xec,
	0x0c, 0x5a, 0xe7, 0x28, 0x96, 0x7a, 0xf1, 0x89, 0xed, 0x7a, 0x79, 0x58, 0x5e, 0x19, 0x96, 0x37,
	0x34, 0x61, 0x39, 0xec, 0x37, 0x21, 0x85, 0x58, 0xb7, 0xfb, 0xf9, 0xfb, 0x8f, 0x6f, 0x35, 0x60,
	0x6d, 0xbe, 0x28, 0xae, 0x7d, 0x68, 0x07, 0x99, 0x5a, 0x50, 0x9e, 0x1d, 0xba, 0x30, 0x65, 0xe5,
	0xf1, 0x01, 0x1d, 0xdb, 0xee, 0x0e, 0xbf, 0x7d, 0xce, 0xc9, 0x35, 0x7e, 0x5f, 0x98, 0xf7, 0xf0,
	0xd2, 0x3a, 0x66, 0x67, 0xd0, 0x1e, 0x49, 0x31, 0x23, 0xaa, 0x1d, 0xba, 0x5f, 0xf7, 0xde, 0xf9,
	0xc5, 0xef, 0xee, 0x11, 0xd7, 0x53, 0x56, 0xc5, 0xc5, 0x02, 0xe8, 0x9c, 0xa3, 0x58, 0xe9, 0x57,
	0x28, 0xf4, 0xff, 0x44, 0x1d, 0x12, 0xd1, 0x81, 0xb3, 0x5f, 0x41, 0xc4, 0xef, 0xf3, 0x6f, 0xf7,
	0xc0, 0x2e, 0xa1, 0x3d, 0x90, 0xd7, 0xe9, 0x12, 0x35, 0x3e, 0x0a, 0xe1, 0xb4, 0x49, 0x66, 0xbf,
	0xf8, 0x19, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x2a, 0xbd, 0x8d, 0x57, 0x03, 0x00, 0x00,
}
