// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api.proto

package API

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	API_Healthz_FullMethodName     = "/API.API/Healthz"
	API_PushTask_FullMethodName    = "/API.API/PushTask"
	API_LoadTask_FullMethodName    = "/API.API/LoadTask"
	API_HeartBeat_FullMethodName   = "/API.API/HeartBeat"
	API_Complete_FullMethodName    = "/API.API/Complete"
	API_Fail_FullMethodName        = "/API.API/Fail"
	API_Progress_FullMethodName    = "/API.API/Progress"
	API_Peek_FullMethodName        = "/API.API/Peek"
	API_ListQueues_FullMethodName  = "/API.API/ListQueues"
	API_DeleteQueue_FullMethodName = "/API.API/DeleteQueue"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	Healthz(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusMessage, error)
	PushTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusMessage, error)
	LoadTask(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*Task, error)
	HeartBeat(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusMessage, error)
	Complete(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusMessage, error)
	Fail(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusMessage, error)
	Progress(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*QueueProgress, error)
	Peek(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*TaskList, error)
	ListQueues(ctx context.Context, in *ListRequestMessage, opts ...grpc.CallOption) (*QueueList, error)
	DeleteQueue(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*StatusMessage, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Healthz(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, API_Healthz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PushTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, API_PushTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) LoadTask(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, API_LoadTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) HeartBeat(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, API_HeartBeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Complete(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, API_Complete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Fail(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, API_Fail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Progress(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*QueueProgress, error) {
	out := new(QueueProgress)
	err := c.cc.Invoke(ctx, API_Progress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Peek(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*TaskList, error) {
	out := new(TaskList)
	err := c.cc.Invoke(ctx, API_Peek_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListQueues(ctx context.Context, in *ListRequestMessage, opts ...grpc.CallOption) (*QueueList, error) {
	out := new(QueueList)
	err := c.cc.Invoke(ctx, API_ListQueues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteQueue(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, API_DeleteQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	Healthz(context.Context, *emptypb.Empty) (*StatusMessage, error)
	PushTask(context.Context, *Task) (*StatusMessage, error)
	LoadTask(context.Context, *RequestMessage) (*Task, error)
	HeartBeat(context.Context, *Task) (*StatusMessage, error)
	Complete(context.Context, *Task) (*StatusMessage, error)
	Fail(context.Context, *Task) (*StatusMessage, error)
	Progress(context.Context, *RequestMessage) (*QueueProgress, error)
	Peek(context.Context, *RequestMessage) (*TaskList, error)
	ListQueues(context.Context, *ListRequestMessage) (*QueueList, error)
	DeleteQueue(context.Context, *RequestMessage) (*StatusMessage, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) Healthz(context.Context, *emptypb.Empty) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedAPIServer) PushTask(context.Context, *Task) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTask not implemented")
}
func (UnimplementedAPIServer) LoadTask(context.Context, *RequestMessage) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadTask not implemented")
}
func (UnimplementedAPIServer) HeartBeat(context.Context, *Task) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedAPIServer) Complete(context.Context, *Task) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedAPIServer) Fail(context.Context, *Task) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fail not implemented")
}
func (UnimplementedAPIServer) Progress(context.Context, *RequestMessage) (*QueueProgress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Progress not implemented")
}
func (UnimplementedAPIServer) Peek(context.Context, *RequestMessage) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Peek not implemented")
}
func (UnimplementedAPIServer) ListQueues(context.Context, *ListRequestMessage) (*QueueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueues not implemented")
}
func (UnimplementedAPIServer) DeleteQueue(context.Context, *RequestMessage) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_Healthz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Healthz(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PushTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).PushTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_PushTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).PushTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_LoadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).LoadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_LoadTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).LoadTask(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_HeartBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).HeartBeat(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_Complete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Complete(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Fail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Fail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_Fail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Fail(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Progress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Progress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_Progress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Progress(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Peek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Peek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_Peek_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Peek(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListQueues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListQueues(ctx, req.(*ListRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteQueue(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "API.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _API_Healthz_Handler,
		},
		{
			MethodName: "PushTask",
			Handler:    _API_PushTask_Handler,
		},
		{
			MethodName: "LoadTask",
			Handler:    _API_LoadTask_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _API_HeartBeat_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _API_Complete_Handler,
		},
		{
			MethodName: "Fail",
			Handler:    _API_Fail_Handler,
		},
		{
			MethodName: "Progress",
			Handler:    _API_Progress_Handler,
		},
		{
			MethodName: "Peek",
			Handler:    _API_Peek_Handler,
		},
		{
			MethodName: "ListQueues",
			Handler:    _API_ListQueues_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _API_DeleteQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
